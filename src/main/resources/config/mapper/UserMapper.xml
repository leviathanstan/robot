<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.robot.dao.UserDao">

    <resultMap id="member" type="com.robot.entity.Member">
        <id column="id" property="id"/>
        <result column="enterprise_id" property="enterpriseId"/>
        <result column="member_rank" property="memberRank"/>
        <result column="member_name" property="memberName"/>
        <result column="member_type" property="memberType"/>
        <result column="contact" property="contact"/>
        <result column="member_number" property="memberNumber"/>
        <result column="member_identifier" property="memberIdentifier"/>
        <result column="contact_info" property="contactInfo"/>
        <result column="contact_info_url" property="contactInfoUrl"/>
        <result column="association_approval" property="associationApproval"/>
        <result column="unit_approval" property="unitApproval"/>
    </resultMap>

    <resultMap id="members" type="com.robot.entity.Member">
        <id column="id" property="id"/>
        <result column="member_mold" property="memberMold"/>
        <result column="member_mold_id" property="memberMoldId"/>
        <result column="member_name" property="memberName"/>
    </resultMap>

    <resultMap id="memberStatus" type="com.robot.entity.User">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
    </resultMap>

    <!-- 注册 -->
    <insert id="register" parameterType="com.robot.entity.User">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into user(id,username,password,email, phone)value(null,#{username},#{password},#{email}, #{phone})
    </insert>
    <!-- 登录 -->
    <select id="login" parameterType="com.robot.entity.User"
            resultType="com.robot.entity.User">
		select id,username,email,role from user where username=#{username} and password=#{password}
	</select>
    <!--重置密码-->
    <update id="resetPassword" parameterType="java.lang.String">
        update user set password=#{password} where email=#{email}
    </update>
    <!--用户搜索-->
    <select id="find" parameterType="com.robot.entity.User" resultType="com.robot.entity.User">
        select username,email from user where 1=1
        <if test="id !=null and id.trim().length()>0 ">
            and id=#{id}
        </if>
        <if test="username !=null and username.trim().length()>0 ">
            and locate(#{username},username)>0
        </if>
        <if test="email !=null and email.trim().length()>0 ">
            and locate(#{email},email)>0
        </if>
        <if test="phone !=null and phone.trim().length()>0 ">
            and locate(#{phone},phone)>0
        </if>
        <choose>
            <when test="role !=null">
                and role =#{role}
            </when>
            <otherwise>
                and role = 7
            </otherwise>
        </choose>
    </select>

    <select id="isExist" parameterType="com.robot.entity.User" resultType="java.lang.Integer">
        select count(*) from user where username = #{username} or email = #{email};
    </select>

    <!--订阅-->
    <insert id="addSubscribe" parameterType="map">
		insert into subscribe (user_id,category_id) values (#{userId},#{categoryId});
	</insert>
    <!--取消订阅-->
    <delete id="deleteSubscribe" parameterType="map">
		delete from subscribe where user_id=#{userId} and category_id=#{categoryId};
	</delete>
    <!--查看是否订阅-->
    <select id="selectSubscribeInfo" parameterType="map" resultType="java.lang.Integer">
		select id from subscribe where user_id=#{userId} and category_id=#{categoryId}
	</select>
    <!--查看所有订阅-->
    <select id="getUserSubscribe" parameterType="int" resultType="int">
		select category_id from subscribe where user_id=#{user_id};
	</select>
    <!--查看所有订阅（附订阅信息）-->
    <select id="getUserSubscribeInfo" parameterType="int" resultType="map">
		select category_id,category from subscribe left join category_id on category_id.id=category_id where user_id=#{user_id}
	</select>
    <!--查看所有分类-->
    <select id="getAllSubscribe" resultType="map">
		select id,category from category_id;
	</select>

    <insert id="insertMember" parameterType="com.robot.entity.Member">
        insert into member (id, member_name, member_type, contact, member_number, contact_info, contact_info_url, member_mold, member_mold_id)
        values (null, #{memberName}, #{memberType}, #{contact}, #{memberNumber}, #{contactInfo}, #{contactInfoUrl}, #{memberMold}, #{memberMoldId});
    </insert>

    <!--插入企业信息-->
    <insert id="insertEnterpriseInfo" parameterType="com.robot.entity.Enterprise">
        <selectKey order="AFTER" resultType="int" keyProperty="id">
            SELECT LAST_INSERT_ID();
        </selectKey>
        insert into enterprise(id, enterprise_name, enterprise_nature, enterprise_type, enterprise_scale, location, registered_capital,
        registered_date, authentication_data, authentication_data_url, management_model, management_scope, main_camp,
        main_application, developing, cooperative_partner, main_customer, postal_code, contact_number, fax, email,
        contact_address, contacts, department, post, qq, wechat) values (null, #{enterpriseName}, #{enterpriseNature},
        #{enterpriseType}, #{enterpriseScale}, #{location}, #{registeredCapital}, #{registeredDate},
        #{authenticationData}, #{authenticationDataUrl}, #{managementModel}, #{managementScope}, #{mainCamp},
        #{mainApplication}, #{developing}, #{cooperativePartner}, #{mainCustomer}, #{postalCode}, #{contactNumber},
        #{fax}, #{email}, #{contactAddress}, #{contacts}, #{department}, #{post}, #{qq}, #{wechat});
    </insert>

    <insert id="insertMemberProducts" parameterType="java.util.List" useGeneratedKeys="false">
        insert into product_enterprise
        (id, enterprise_id, brand, version, application_area, application_industry, application_scenario)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (
            null,
            #{item.enterpriseId},
            #{item.brand},
            #{item.version},
            #{item.applicationArea},
            #{item.applicationIndustry},
            #{item.applicationScenario}
            )
        </foreach>
    </insert>

    <insert id="insertMemberProduct" parameterType="com.robot.entity.RepresentativeWork">
        insert into product_enterprise (id, enterprise_id, brand, version, application_area, application_industry, application_scenario) value (null, #{enterpriseId}, #{brand}, #{version}, #{applicationArea}, #{applicationIndustry}, #{applicationScenario});
    </insert>

    <select id="isExistMember" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(*) from member where member_name = #{enterpriseName};
    </select>

    <insert id="insertMemberUser">
        insert into member_user (id, user_id, member_id) values (null, #{userId}, #{memberId})
    </insert>

    <insert id="insertMemberProxy">
        <selectKey order="AFTER" resultType="int" keyProperty="id">
            SELECT LAST_INSERT_ID();
        </selectKey>
        insert into user (id, username, password, email, role, status) values (null, #{username}, #{password}, #{email},
        #{role}, #{status})
    </insert>

    <select id="getMemberInfo" parameterType="java.lang.Integer" resultType="java.util.HashMap">
       select m.id, e.id as enterpriseId, m.member_rank as memberRank, m.member_name as memberName, m.member_type as memberType, m.contact, m.member_number as memberNumber, m.member_identifier as memberIdentifier, m.contact_info as contactInfo, m.contact_info_url as contactInfoUrl, m.association_approval as associationApproval, m.unit_approval as unitApproval, e.enterprise_name as enterpriseName, e.enterprise_type as enterpriseType, e.enterprise_scale as enterpriseScale, e.location, e.registered_capital as registeredCapital, e.registered_date as registeredDate, e.authentication_data as authenticationData, e.authentication_data_url as authenticationDataUrl, e.management_model as managementModel, e.management_scope as managementScope, e.main_camp as mainCamp, e.main_application as mainApplication, e.developing, e.cooperative_partner as cooperativePartner, e.main_customer as mainCustomer, e.postal_code as postalCode, e.contact_number as contactNumber, e.fax, e.email, e.contact_address as contactAddress, e.contacts, e.department, e.post, e.qq, e.wechat, e.enterprise_nature as enterpriseNature from member m, enterprise e where m.member_mold_id = e.id and m.id = #{memberId};
    </select>

    <select id="getMemberList" resultMap="members">
        select m.id, m.member_name, m.member_mold, m.member_mold_id from member m where m.id in (select member_id from member_user where user_id in (select id from user where `status` = 2));
    </select>

    <update id="judgeMember" parameterType="com.robot.entity.Member">
        update member set member_rank = #{memberRank}, member_identifier = #{memberIdentifier}, association_approval = #{associationApproval} where id=#{id}
    </update>

    <update id="judgeUser" parameterType="com.robot.entity.User">
        update user set status = #{status} where role = 4 and id = #{id};
    </update>

    <select id="getMemberListStatus" resultType="java.util.HashMap">
        select u.id, u.username, u.status, m.id as memberId, m.member_mold_id as enterpriseId, m.member_rank as memberRank, m.member_name as memberName, m.member_type as memberType, m.contact, m.member_number as memberNumber, m.member_identifier as memberIdentifier, m.contact_info as contactInfo, m.contact_info_url as contactInfoUrl, m.association_approval as associationApproval, m.member_mold as memberMold from user u, member m, member_user mu where mu.member_id = m.id and mu.user_id = u.id and u.status = 1
    </select>
</mapper>