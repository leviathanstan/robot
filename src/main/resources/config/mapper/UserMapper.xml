<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.robot.dao.UserDao">

    <resultMap id="member" type="com.robot.entity.Member">
        <id column="id" property="id"/>
        <result column="enterprise_id" property="enterpriseId"/>
        <result column="member_rank" property="memberRank"/>
        <result column="member_name" property="memberName"/>
        <result column="member_type" property="memberType"/>
        <result column="contact" property="contact"/>
        <result column="member_number" property="memberNumber"/>
        <result column="member_identifier" property="memberIdentifier"/>
        <result column="contact_info" property="contactInfo"/>
        <result column="contact_info_url" property="contactInfoUrl"/>
        <result column="association_approval" property="associationApproval"/>
        <result column="unit_approval" property="unitApproval"/>
    </resultMap>

    <resultMap id="members" type="com.robot.entity.Member">
        <id column="id" property="id"/>
        <result column="member_mold" property="memberMold"/>
        <result column="member_mold_id" property="memberMoldId"/>
        <result column="member_name" property="memberName"/>
    </resultMap>

    <resultMap id="memberStatus" type="com.robot.entity.User">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
    </resultMap>

    <resultMap id="enterprise" type="com.robot.entity.Enterprise">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="enterprise_name" jdbcType="VARCHAR" property="enterpriseName" />
        <result column="enterprise_nature" jdbcType="VARCHAR" property="enterpriseNature" />
        <result column="enterprise_type" jdbcType="VARCHAR" property="enterpriseType" />
        <result column="enterprise_scale" jdbcType="VARCHAR" property="enterpriseScale" />
        <result column="location" jdbcType="VARCHAR" property="location" />
        <result column="registered_capital" jdbcType="VARCHAR" property="registeredCapital" />
        <result column="registered_date" jdbcType="DATE" property="registeredDate" />
        <result column="authentication_data" jdbcType="VARCHAR" property="authenticationData" />
        <result column="authentication_data_url" jdbcType="VARCHAR" property="authenticationDataUrl" />
        <result column="management_model" jdbcType="VARCHAR" property="managementModel" />
        <result column="management_scope" jdbcType="VARCHAR" property="managementScope" />
        <result column="main_camp" jdbcType="VARCHAR" property="mainCamp" />
        <result column="main_application" jdbcType="VARCHAR" property="mainApplication" />
        <result column="cooperative_partner" jdbcType="VARCHAR" property="cooperativePartner" />
        <result column="main_customer" jdbcType="VARCHAR" property="mainCustomer" />
        <result column="postal_code" jdbcType="VARCHAR" property="postalCode" />
        <result column="contact_number" jdbcType="VARCHAR" property="contactNumber" />
        <result column="fax" jdbcType="VARCHAR" property="fax" />
        <result column="email" jdbcType="VARCHAR" property="email" />
        <result column="contact_address" jdbcType="VARCHAR" property="contactAddress" />
        <result column="contacts" jdbcType="VARCHAR" property="contacts" />
        <result column="department" jdbcType="VARCHAR" property="department" />
        <result column="post" jdbcType="VARCHAR" property="post" />
        <result column="qq" jdbcType="VARCHAR" property="qq" />
        <result column="wechat" jdbcType="VARCHAR" property="wechat" />
    </resultMap>
    <resultMap extends="enterprise" id="enterpriseWithBLOBs" type="com.robot.entity.Enterprise">
        <result column="developing" jdbcType="LONGVARCHAR" property="developing" />
    </resultMap>

    <resultMap id="representativeWork" type="com.robot.entity.RepresentativeWork">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="enterprise_id" jdbcType="INTEGER" property="enterpriseId" />
        <result column="brand" jdbcType="VARCHAR" property="brand" />
        <result column="version" jdbcType="VARCHAR" property="version" />
        <result column="application_area" jdbcType="VARCHAR" property="applicationArea" />
        <result column="application_industry" jdbcType="VARCHAR" property="applicationIndustry" />
        <result column="application_scenario" jdbcType="VARCHAR" property="applicationScenario" />
    </resultMap>

    <!-- 注册 -->
    <insert id="register" parameterType="com.robot.entity.User">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID() AS ID
        </selectKey>
        insert into user(id,username,password,email, phone)value(null,#{username},#{password},#{email}, #{phone})
    </insert>
    <!-- 登录 -->
    <select id="login" parameterType="com.robot.entity.User"
            resultType="com.robot.entity.User">
		select id,username,email,role from user where username=#{username} and password=#{password}
	</select>
    <!--重置密码-->
    <update id="resetPassword" parameterType="java.lang.String">
        update user set password=#{password} where email=#{email}
    </update>
    <!--用户搜索-->
    <select id="find" parameterType="com.robot.entity.User" resultType="com.robot.entity.User">
        select username,email from user where 1=1
        <if test="id !=null and id.trim().length()>0 ">
            and id=#{id}
        </if>
        <if test="username !=null and username.trim().length()>0 ">
            and locate(#{username},username)>0
        </if>
        <if test="email !=null and email.trim().length()>0 ">
            and locate(#{email},email)>0
        </if>
        <if test="phone !=null and phone.trim().length()>0 ">
            and locate(#{phone},phone)>0
        </if>
        <choose>
            <when test="role !=null">
                and role =#{role}
            </when>
            <otherwise>
                and role = 7
            </otherwise>
        </choose>
    </select>

    <select id="isExist" parameterType="com.robot.entity.User" resultType="java.lang.Integer">
        select count(*) from user where username = #{username} or email = #{email};
    </select>

    <!--订阅-->
    <insert id="addSubscribe" parameterType="map">
		insert into subscribe (user_id,category_id) values (#{userId},#{categoryId});
	</insert>
    <!--取消订阅-->
    <delete id="deleteSubscribe" parameterType="map">
		delete from subscribe where user_id=#{userId} and category_id=#{categoryId};
	</delete>
    <!--查看是否订阅-->
    <select id="selectSubscribeInfo" parameterType="map" resultType="java.lang.Integer">
		select id from subscribe where user_id=#{userId} and category_id=#{categoryId}
	</select>
    <!--查看所有订阅-->
    <select id="getUserSubscribe" parameterType="int" resultType="int">
		select category_id from subscribe where user_id=#{user_id};
	</select>
    <!--查看所有订阅（附订阅信息）-->
    <select id="getUserSubscribeInfo" parameterType="int" resultType="map">
		select category_id,category from subscribe left join category_id on category_id.id=category_id where user_id=#{user_id}
	</select>
    <!--查看所有分类-->
    <select id="getAllSubscribe" resultType="map">
		select id,category from category_id;
	</select>

    <insert id="insertMember" parameterType="com.robot.entity.Member">
        <selectKey order="AFTER" resultType="int" keyProperty="id">
            SELECT LAST_INSERT_ID();
        </selectKey>
        insert into member (id, member_name, member_type, contact, member_number, contact_info, contact_info_url, member_mold, member_mold_id)
        values (null, #{memberName}, #{memberType}, #{contact}, #{memberNumber}, #{contactInfo}, #{contactInfoUrl}, #{memberMold}, #{memberMoldId});
    </insert>

    <!--插入企业信息-->
    <insert id="insertEnterpriseInfo" parameterType="com.robot.entity.Enterprise">
        <selectKey order="AFTER" resultType="int" keyProperty="id">
            SELECT LAST_INSERT_ID();
        </selectKey>
        insert into enterprise(id, enterprise_name, enterprise_nature, enterprise_type, enterprise_scale, location, registered_capital,
        registered_date, authentication_data, authentication_data_url, management_model, management_scope, main_camp,
        main_application, developing, cooperative_partner, main_customer, postal_code, contact_number, fax, email,
        contact_address, contacts, department, post, qq, wechat) values (null, #{enterpriseName}, #{enterpriseNature},
        #{enterpriseType}, #{enterpriseScale}, #{location}, #{registeredCapital}, #{registeredDate},
        #{authenticationData}, #{authenticationDataUrl}, #{managementModel}, #{managementScope}, #{mainCamp},
        #{mainApplication}, #{developing}, #{cooperativePartner}, #{mainCustomer}, #{postalCode}, #{contactNumber},
        #{fax}, #{email}, #{contactAddress}, #{contacts}, #{department}, #{post}, #{qq}, #{wechat});
    </insert>

    <insert id="insertMemberProducts" parameterType="java.util.List" useGeneratedKeys="false">
        insert into product_enterprise
        (id, enterprise_id, brand, version, application_area, application_industry, application_scenario)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (
            null,
            #{item.enterpriseId},
            #{item.brand},
            #{item.version},
            #{item.applicationArea},
            #{item.applicationIndustry},
            #{item.applicationScenario}
            )
        </foreach>
    </insert>

    <insert id="insertMemberProduct" parameterType="com.robot.entity.RepresentativeWork">
        insert into product_enterprise (id, enterprise_id, brand, version, application_area, application_industry, application_scenario) value (null, #{enterpriseId}, #{brand}, #{version}, #{applicationArea}, #{applicationIndustry}, #{applicationScenario});
    </insert>

    <select id="isExistMember" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(*) from member where member_name = #{enterpriseName};
    </select>

    <insert id="insertMemberUser">
        insert into member_user (id, user_id, member_id) values (null, #{userId}, #{memberId})
    </insert>

    <insert id="insertMemberProxy">
        <selectKey order="AFTER" resultType="int" keyProperty="id">
            SELECT LAST_INSERT_ID();
        </selectKey>
        insert into user (id, username, password, email, role, status) values (null, #{username}, #{password}, #{email},
        #{role}, #{status})
    </insert>

    <select id="getMemberInfo" parameterType="java.lang.Integer" resultType="java.util.HashMap">
       select m.id, e.id as enterpriseId, m.member_rank as memberRank, m.member_name as memberName, m.member_type as memberType, m.contact, m.member_number as memberNumber, m.member_identifier as memberIdentifier, m.contact_info as contactInfo, m.contact_info_url as contactInfoUrl, m.association_approval as associationApproval, m.unit_approval as unitApproval, e.enterprise_name as enterpriseName, e.enterprise_type as enterpriseType, e.enterprise_scale as enterpriseScale, e.location, e.registered_capital as registeredCapital, e.registered_date as registeredDate, e.authentication_data as authenticationData, e.authentication_data_url as authenticationDataUrl, e.management_model as managementModel, e.management_scope as managementScope, e.main_camp as mainCamp, e.main_application as mainApplication, e.developing, e.cooperative_partner as cooperativePartner, e.main_customer as mainCustomer, e.postal_code as postalCode, e.contact_number as contactNumber, e.fax, e.email, e.contact_address as contactAddress, e.contacts, e.department, e.post, e.qq, e.wechat, e.enterprise_nature as enterpriseNature from member m, enterprise e where m.member_mold_id = e.id and m.id = #{memberId};
    </select>

    <select id="getMemberList" resultMap="members">
        select m.id, m.member_name, m.member_mold, m.member_mold_id from member m
    </select>

    <update id="judgeMember" parameterType="com.robot.entity.Member">
        update member set member_rank = #{memberRank}, member_identifier = #{memberIdentifier}, association_approval = #{associationApproval} where id=#{id}
    </update>

    <update id="judgeUser" parameterType="com.robot.entity.User">
        update user set status = #{status} where role = 4 and id = #{id};
    </update>

    <select id="getMemberListStatus" resultType="java.util.HashMap">
        select u.id, u.username, u.status, m.id as memberId, m.member_mold_id as enterpriseId, m.member_rank as memberRank, m.member_name as memberName, m.member_type as memberType, m.contact, m.member_number as memberNumber, m.member_identifier as memberIdentifier, m.contact_info as contactInfo, m.contact_info_url as contactInfoUrl, m.association_approval as associationApproval, m.member_mold as memberMold from user u, member m, member_user mu where mu.member_id = m.id and mu.user_id = u.id and u.status = 1
    </select>

    <select id="getUser" parameterType="int" resultType="com.robot.entity.User">
        select * from user where id = #{id}
    </select>

    <!--通过会员单位名查找会员-->
    <select id="selectMemberByName" resultType="com.robot.entity.Member">
        select id,member_name from member where member_name=#{memberName}
    </select>

    <!--搜索某会员单位的所有会员-->
    <select id="selectUIds" resultType="java.lang.Integer">
        select user_id from member_user where member_id = #{memberId}
    </select>

    <!--查找用户所属的会员单位id-->
    <select id="getMemberIdByUid" resultType="java.lang.Integer">
        select member_id from member_user where user_id = #{userId}
    </select>

    <!--获取企业注册信息-->
    <select id="getEnterprise" resultType="int" resultMap="enterpriseWithBLOBs">
        select e.* from member m, enterprise e where m.id = #{memberId} and e.id = m.member_mold_id
    </select>

    <update id="updateEnterprise" parameterType="com.robot.entity.Enterprise">
        update enterprise
        <set>
            <if test="enterpriseNature != null and enterpriseNature.trim().length() > 0">
                enterprise_nature = #{enterpriseNature,jdbcType=VARCHAR},
            </if>
            <if test="enterpriseType != null and enterpriseType.trim().length() > 0">
                enterprise_type = #{enterpriseType,jdbcType=VARCHAR},
            </if>
            <if test="enterpriseScale != null and enterpriseScale.trim().length() > 0">
                enterprise_scale = #{enterpriseScale,jdbcType=VARCHAR},
            </if>
            <if test="location != null and location.trim().length() > 0">
                `location` = #{location,jdbcType=VARCHAR},
            </if>
            <if test="registeredCapital != null and registeredCapital.trim().length() > 0">
                registered_capital = #{registeredCapital,jdbcType=VARCHAR},
            </if>
            <if test="registeredDate != null">
                registered_date = #{registeredDate,jdbcType=DATE},
            </if>
            <if test="authenticationData != null and authenticationData.trim().length() > 0">
                authentication_data = #{authenticationData,jdbcType=VARCHAR},
            </if>
            <if test="authenticationDataUrl != null and authenticationDataUrl.trim().length() > 0">
                authentication_data_url = #{authenticationDataUrl,jdbcType=VARCHAR},
            </if>
            <if test="managementModel != null and managementModel.trim().length() > 0">
                management_model = #{managementModel,jdbcType=VARCHAR},
            </if>
            <if test="managementScope != null and managementScope.trim().length() > 0">
                management_scope = #{managementScope,jdbcType=VARCHAR},
            </if>
            <if test="mainCamp != null and mainCamp.trim().length() > 0">
                main_camp = #{mainCamp,jdbcType=VARCHAR},
            </if>
            <if test="mainApplication != null and mainApplication.trim().length() > 0">
                main_application = #{mainApplication,jdbcType=VARCHAR},
            </if>
            <if test="cooperativePartner != null and cooperativePartner.trim().length() > 0">
                cooperative_partner = #{cooperativePartner,jdbcType=VARCHAR},
            </if>
            <if test="mainCustomer != null and mainCustomer.trim().length() > 0">
                main_customer = #{mainCustomer,jdbcType=VARCHAR},
            </if>
            <if test="postalCode != null and postalCode.trim().length() > 0">
                postal_code = #{postalCode,jdbcType=VARCHAR},
            </if>
            <if test="contactNumber != null and contactNumber.trim().length() > 0">
                contact_number = #{contactNumber,jdbcType=VARCHAR},
            </if>
            <if test="fax != null and fax.trim().length() > 0">
                fax = #{fax,jdbcType=VARCHAR},
            </if>
            <if test="email != null and email.trim().length() > 0">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="contactAddress != null and contactAddress.trim().length() > 0">
                contact_address = #{contactAddress,jdbcType=VARCHAR},
            </if>
            <if test="contacts != null and contacts.trim().length() > 0">
                contacts = #{contacts,jdbcType=VARCHAR},
            </if>
            <if test="department != null and department.trim().length() > 0">
                department = #{department,jdbcType=VARCHAR},
            </if>
            <if test="post != null and post.trim().length() > 0">
                post = #{post,jdbcType=VARCHAR},
            </if>
            <if test="qq != null and qq.trim().length() > 0">
                qq = #{qq,jdbcType=VARCHAR},
            </if>
            <if test="wechat != null and wechat.trim().length() > 0">
                wechat = #{wechat,jdbcType=VARCHAR},
            </if>
            <if test="developing != null and developing.trim().length() > 0">
                developing = #{developing,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateMember" parameterType="com.robot.entity.Member">
        update member
        <set>
            <if test="contactInfo != null and contactInfo.trim().length() > 0">
                contact_info = #{contactInfo,jdbcType=VARCHAR},
            </if>
            <if test="contactInfoUrl != null and contactInfoUrl.trim().length() > 0">
                contact_info_url = #{contactInfoUrl,jdbcType=VARCHAR},
            </if>
            <if test="contact != null and contact.trim().length() > 0">
                contact = #{contact,jdbcType=VARCHAR},
            </if>
            <if test="memberType != null and memberType.trim().length() > 0">
                member_type = #{memberType,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <!--获取会员填写的代表作品-->
    <select id="getRepresentativeWork" resultMap = "representativeWork">
        select id, brand, version, application_area, application_industry, application_scenario from product_enterprise where enterprise_id = #{enterpriseId}
    </select>

    <update id="updateRepresentativeWork" parameterType="com.robot.entity.RepresentativeWork">
        update product_enterprise
        <set>
            <if test="brand != null and brand.trim().length() > 0">
                brand = #{brand,jdbcType=VARCHAR},
            </if>
            <if test="version != null and version.trim().length() > 0">
                version = #{version,jdbcType=VARCHAR},
            </if>
            <if test="applicationArea != null and applicationArea.trim().length() > 0">
                application_area = #{applicationArea,jdbcType=VARCHAR},
            </if>
            <if test="applicationIndustry != null and applicationIndustry.trim().length() > 0">
                application_industry = #{applicationIndustry,jdbcType=VARCHAR},
            </if>
            <if test="applicationScenario != null and applicationScenario.trim().length() > 0">
                application_scenario = #{applicationScenario,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER} and enterprise_id = #{enterpriseId}
    </update>
</mapper>